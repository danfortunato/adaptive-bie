function pass = test_closed_curve()

tol = 1e-9;
pass = [];

%% Construct a periodic closed curve from given nodes
N = 100;
A = ClosedCurve.star(N);
B = ClosedCurve(A.x{1});
pass(end+1) = ( norm(A.s{1}         - B.s{1})         < tol ) && ...
              ( norm(A.w{1}         - B.w{1})         < tol ) && ...
              ( norm(A.cx{1}        - B.cx{1})        < tol ) && ...
              ( norm(A.cw{1}        - B.cw{1})        < tol ) && ...
              ( norm(A.velocity{1}  - B.velocity{1})  < tol ) && ...
              ( norm(A.speed{1}     - B.speed{1})     < tol ) && ...
              ( norm(A.normal{1}    - B.normal{1})    < tol ) && ...
              ( norm(A.curvature{1} - B.curvature{1}) < tol );

%% Construct a panelized closed curve from given nodes
N  = 10;
np = 70;
A = ClosedCurve.star(N, 'quadrature', 'panel', 'panels', np);
B = ClosedCurve(A.x);
pass(end+1) = true;
for k = 1:np
    pass(end) = pass(end) && ...
                ( norm(A.s{k}         - B.s{k})         < tol ) && ...
                ( norm(A.w{k}         - B.w{k})         < tol ) && ...
                ( norm(A.cx{k}        - B.cx{k})        < tol ) && ...
                ( norm(A.cw{k}        - B.cw{k})        < tol ) && ...
                ( norm(A.velocity{k}  - B.velocity{k})  < tol ) && ...
                ( norm(A.speed{k}     - B.speed{k})     < tol ) && ...
                ( norm(A.normal{k}    - B.normal{k})    < tol ) && ...
                ( norm(A.curvature{k} - B.curvature{k}) < tol );
end

end
